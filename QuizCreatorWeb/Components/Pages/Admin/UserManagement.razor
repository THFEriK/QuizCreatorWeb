@page "/admin/users"
@using QuizCreatorWeb.Data
@using QuizCreatorWeb.Data.Dto
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<AuthorizeView Roles="Admin">
    <Authorized>
        <h3>User Management</h3>

        @if (users == null)
        {
            <p>Loading...</p>
        }
        else if (!users.Any())
        {
            <p>No users found.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Admin</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>@(user.IsAdmin ? "Yes" : "No")</td>
                            <td>@user.CreatedDate.ToString("yyyy-MM-dd")</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditUser(user.Id)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => ConfirmDelete(user.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
</AuthorizeView>

@code {
    private List<UserDto>? users;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsers();
    }

    private void EditUser(int userId)
    {
        NavigationManager.NavigateTo($"/admin/users/edit/{userId}");
    }

    private async Task ConfirmDelete(int userId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this user?" });
        if (confirmed)
        {
            await UserService.DeleteUser(userId);
        }
    }
}
