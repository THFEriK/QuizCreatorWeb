@page "/all-quizzes"
@using Microsoft.AspNetCore.Authentication
@using QuizCreatorWeb.Data
@using QuizCreatorWeb.Data.Dto
@inject QuizService QuizService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>All Quizzes</h3>

@if (quizzes == null)
{
    <p class="loading-text">Loading...</p>
}
else if (!quizzes.Any())
{
    <p>No quizzes available.</p>
}
else
{
    <div class="quiz-container">
        @foreach (var quiz in quizzes)
        {
            <div class="quiz-card">
                <div class="quiz-info">
                    <strong>@quiz.Title</strong>
                    <p>@quiz.Description</p>
                </div>
                <button class="fill-button" @onclick="() => FillQuiz(quiz.Id)">Fill</button>
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <button class="edit-button" @onclick="() => EditQuiz(quiz.Id)">Edit</button>
                        <button class="view-button" @onclick="() => NavigateToResponses(quiz.Id)">Responses</button>
                        <button class="delete-button" @onclick="() => DeleteQuiz(quiz.Id)">Delete</button>
                    </Authorized>
                </AuthorizeView>
            </div>
        }
    </div>
}

@code {
    private List<QuizDto>? quizzes;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        quizzes = await QuizService.GetAllQuizzes();
    }

    private void FillQuiz(int quizId)
    {
        NavigationManager.NavigateTo($"/fill-quiz/{quizId}");
    }

    private void EditQuiz(int quizId)
    {
        NavigationManager.NavigateTo($"/questions-list/{quizId}");
    }

    private void NavigateToResponses(int quizId)
    {
        NavigationManager.NavigateTo($"/quiz-responses/{quizId}");
    }

    private async Task DeleteQuiz(int quizId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this quiz?" });
        if (confirmed)
        {
            await QuizService.DeleteQuiz(quizId);
            quizzes = await QuizService.GetAllQuizzes();
        }
    }
}
